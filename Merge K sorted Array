Approach TC o(k2logk)  SC o(k2)
 vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        //code here
      vector<int> ans;
      for(int i=0;i<K;i++){
          for(int j=0;j<K;j++){
              ans.push_back(arr[i][j]);
          }
      }
      sort(ans.begin(),ans.end());
      return ans;
    }
    
    
    Approach 2
    
    class Solution
{
    public:
    //Function to merge k sorted arrays.
    class node{
        public:
        int data;
        int i;
        int j;
        node(int data,int row,int col){
            this->data=data;
            this->i=row;
            this->j=col;
        }
    };
    class compare{
        public:
        bool operator()(node* a,node* b){
            return a->data > b->data;
        }
    };
    vector<int> mergeKArrays(vector<vector<int>> arr, int K)
    {
        //code here
        priority_queue<node*,vector<node*>,compare> minHeap;
        for(int i=0;i<K;i++){
            node* temp=new node(arr[i][0],i,0);
            minHeap.push(temp);
        }
        vector<int> ans;
        while(minHeap.size()>0){
            node* temp=minHeap.top();
            ans.push_back(temp->data);
            minHeap.pop();
            int i=temp->i;
            int j=temp->j;
            if(j+1<arr[i].size()){
                node* next=new node(arr[i][j+1],i,j+1);
                minHeap.push(next);
            }
        }
        return ans;
    }
};
TC o(n*klogk)
SC o(k)
